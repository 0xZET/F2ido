
// The USB/IP protocol is described at:
// https://www.kernel.org/doc/Documentation/usb/usbip_protocol.txt

load "util.pk";

// The version field uses two bytes for the binary-coded decimal USBIP
// version number.  E.g.  0x0100 = v1.0.0

type BCDDigit = struct { nibble nibble : nibble <= 0x9; };

type Version =
  struct {
    nibble reserved : reserved == 0; 
    BCDDigit major;
    BCDDigit minor;
    BCDDigit patch;
    method _print = void:
    {
      printf ("v%u4d.%u4d.%u4d", major.nibble, minor.nibble, patch.nibble);
    }

  };


// A transfer usually involves of request and reply packet.

var directionTags =
  [
    tag("REQUEST", 0x80),
    tag("REPLY", 0x00),
  ];

type PktDirection =
  struct {
    byte tag : validTag(tag, directionTags);
    method _print = void:
    {
      printTag(tag, directionTags);
    }
  };

// There are various types of packets 

var OP_REQ_IMPORT = 0x8003;
var OP_REQ_DEVLIST =  0x8005;

var pktCodes =
  [
    tag("REQ_IMPORT",  OP_REQ_IMPORT),
    tag("REQ_DEVLIST", OP_REQ_DEVLIST),
  ];

type PktCode =
  struct {
    big uint<16> tag : validTag(tag as uint, pktCodes);
    method _print = void:
    {
      printTag(tag, pktCodes);
    }
  };

// All packages have a common header.  In the C header files this struct
// is called op_common.
type op_common =
  struct {
    Version version;
    PktCode code;
    big uint<32> status ;
  };

type BusId =
  struct {
    byte[32] busid;
    method _print = void:
    {
      printf ("%v", string @ SELF'offset);
    }
  };

type ImportRequest =
  struct {
    op_common header: header.code.tag == OP_REQ_IMPORT;
    BusId busid;
  };

type DevlistRequest =
  struct {
    op_common header: header.code.tag == OP_REQ_DEVLIST;
  };

var USBIP_CMD_SUBMIT = 0x0001;
var USBIP_CMD_UNLINK = 0x0002;
var USBIP_RET_SUBMIT = 0x0003;
var USBIP_RET_UNLINK = 0x0004;

var cmdCodes =
  [
    tag("CMD_SUBMIT",  USBIP_CMD_SUBMIT),
    tag("CMD_UNLINK",  USBIP_CMD_UNLINK),
    tag("RET_SUBMIT",  USBIP_RET_SUBMIT),
    tag("RET_UNLINK",  USBIP_RET_UNLINK),
  ];

type CmdCode =
  struct {
    big uint<32> tag : validTag(tag as uint, cmdCodes);
    method _print = void:
    {
      printTag(tag, cmdCodes);
    }
  };

var USBIP_DIR_OUT = 0x00u;
var USBIP_DIR_IN  = 0x01u;

type usbip_header_basic =
  struct {
    CmdCode command;
    big uint<32> seqnum;
    big uint<32> devid;
    big uint<32> direction : direction in [USBIP_DIR_IN, USBIP_DIR_OUT];
    big uint<32> ep : 0 <= ep && ep <= 15;
  };


var URB_SHORT_NOT_OK        = 0x00000001u;
var URB_ISO_ASAP            = 0x00000002u;
var URB_NO_TRANSFER_DMA_MAP = 0x00000004u;
var URB_ZERO_PACKET         = 0x00000040u;
var URB_NO_INTERRUPT        = 0x00000080u;
var URB_FREE_BUFFER         = 0x00000100u;
var URB_DIR_MASK            = 0x00000200u;

var transferFlags =
  [tag("URB_SHORT_NOT_OK", URB_SHORT_NOT_OK),
   tag("URB_ISO_ASAP", URB_ISO_ASAP),
   tag("URB_NO_TRANSFER_DMA_MAP", URB_NO_TRANSFER_DMA_MAP),
   tag("URB_ZERO_PACKET", URB_ZERO_PACKET),
   tag("URB_NO_INTERRUPT", URB_NO_INTERRUPT),
   tag("URB_FREE_BUFFER", URB_FREE_BUFFER),
   tag("URB_DIR_MASK", URB_DIR_MASK)];

type TransferFlags =
  struct {
    big uint<32> flags;
    method _print = void:
    {
      print"(";
      var first = 1;
      for (t in transferFlags where t.tag & flags) {
	if (!first) { print"|"; };
	printf("%s", t.name);
	first = 0;
      };
      print")";
    }
};

type SetupRequestType =
  struct {
    uint<1> direction;
    uint<2> type_;
    uint<5> recipient;
    method _print = void:
    {
      printf("%s/%s/%s",
	     ["H2D","D2H"][direction],
	     ["Standard","Class","Vendor","Reserved"][type_],
	     ["Device","Interface","Endpoint","Other"][recipient]);
    }    
  };

var descriptorTypeNames = [
"Device",
"Configuration",
"String",
"Interface",
"Endpoint",
"DeviceQualifier",
"OtherSpeedConfiguration",
"InterfacePower",
];

var standardRequestNames = [
    "GetStatus",
    "ClearFeature",
    "Reserved_2",
    "SetFeature",
    "Reserved_4",
    "SetAddress",
    "GetDescriptor",
    "SetDescriptor",
    "GetConfiguration",
    "SetConfiguration",
    "GetInterface",
    "SetInterface",
    "SynchFrame",
  ];

var hidRequestTags =
  [
    tag("GetReport",1),
    tag("GetIdle",2),
    tag("GetProtocol",3),
    tag("SetReport",9),
    tag("SetIdle",0xa),
    tag("SetProtocol",0xb),
  ];

type SetupPacket =
  struct {
    SetupRequestType request_type;
    byte request;
    uint<16> value;
    uint<16> index;
    uint<16> length;
    method _print = void:
    {
      printf("%v %s %s index=%v length=%v", request_type,
	     (request_type.type_ == 0
              ? standardRequestNames[request]
	      : (request_type.type_ == 1
                 ? tagName(request, hidRequestTags)
		 : format("request=%v",request))),
	     ((request_type.type_ == 0 && request_type.recipient == 0
               && request == 6)
	      ? format("%s idx=%v", descriptorTypeNames[(value .>> 8) - 1],
		       value & 255)
	      : format("value=%v", value)),
	     index, length);
    }
  };

type SubmitCmd =
  struct {
    usbip_header_basic base : base.command.tag == USBIP_CMD_SUBMIT;
    TransferFlags transfer_flags;
    big int<32> transfer_buffer_length;
    big int<32> start_frame;
    big int<32> number_of_packets;
    big int<32> interval;
    SetupPacket setup;
  };

type Packet =
  union {
    ImportRequest importrequest;
    DevlistRequest devlistrequest;
    SubmitCmd submitcmd;
  };
